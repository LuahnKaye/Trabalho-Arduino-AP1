//notas 
#define B0 31
#define C1 33
#define CS1 35
#define D1 37
#define DS1 39
#define E1 41
#define F1 44
#define FS1 46
#define G1 49
#define GS1 52
#define A1 55
#define AS1 58
#define B1 62
#define C2 65
#define CS2 69
#define D2 73
#define DS2 78
#define E2 82
#define F2 87
#define FS2 93
#define G2 98
#define GS2 104
#define A2 110
#define AS2 117
#define B2 123
#define C3 131
#define CS3 139
#define D3 147
#define DS3 156
#define E3 165
#define F3 175
#define FS3 185
#define G3 196
#define GS3 208
#define A3 220
#define AS3 233
#define B3 247
#define C4 262
#define CS4 277
#define D4 294
#define DS4 311
#define E4 330
#define F4 349
#define FS4 370
#define G4 392
#define GS4 415
#define A4 440
#define AS4 466
#define B4 494
#define C5 523
#define CS5 554
#define D5 587
#define DS5 622
#define E5 659
#define F5 698
#define FS5 740
#define G5 784
#define GS5 831
#define A5 880
#define AS5 932
#define B5 988
#define C6 1047
#define CS6 1109
#define D6 1175
#define DS6 1245
#define E6 1319
#define F6 1397
#define FS6 1480
#define G6 1568
#define GS6 1661
#define A6 1760
#define AS6 1865
#define B6 1976
#define C7 2093
#define CS7 2217
#define D7 2349
#define DS7 2489
#define E7 2637
#define F7 2794
#define FS7 2960
#define G7 3136
#define GS7 3322
#define A7 3520
#define AS7 3729
#define B7 3951
#define C8 4186
#define CS8 4435
#define D8 4699
#define DS8 4978
#define Ash5 932
#define Ash4 466

// Defina as entradas e saídas
#define I0 2
#define I1 3
#define I2 4
#define I3 5
#define S0 51
#define S1 47
#define S2 43

int tempo = 1000;

int currentMelodyPin = -1; // Variável para rastrear o pino da melodia atual

void setup() {
  pinMode(I0, INPUT);
  pinMode(I1, INPUT);
  pinMode(I2, INPUT);
  pinMode(I3, INPUT);

  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
}


void loop() {
  int sw1, sw2, sw3, sw4;
  sw1 = digitalRead(I0);
  sw2 = digitalRead(I1);
  sw3 = digitalRead(I2);
  sw4 = digitalRead(I3);

  if (sw1 == 1) {
    stopMelody(S0);
    stopMelody(S1);
    stopMelody(S2);

    if (sw2 == 1 && sw3 == 1 && sw4 == 1) {
      playMusic1();
    }
    if (sw2 == 1 && sw3 == 1) {
      playMusic2();
    }
    if (sw2 == 1 && sw4 == 1) {
      playMusic3();
    }
    if (sw3 == 1 && sw4 == 1) {
      playMusic4();
    }
    if (sw2 == 1) {
      playMusic5();
    }
    if (sw3 == 1) {
      playMusic6();
    }
    if (sw4 == 1) {
      playMusic7();
    }
    if (sw2 == 0 && sw3 == 0 && sw4 == 0) {
      playMusic8();
    }
  } else {
    stopMelody(S0);
    stopMelody(S1);
    stopMelody(S2);
  }
}

void playMelody(int pin1, int pin2, int pin3) {
  // Interrompe a melodia atual
  if (currentMelodyPin != -1) {
    stopMelody(currentMelodyPin);
  }

  // Inicia a nova melodia
  tone(pin1, 440);
  tone(pin2, 523);
  tone(pin3, 659);

  currentMelodyPin = pin1;
}

void stopMelody(int pin) {
  noTone(pin);
}

void playMusic1() {
  int melody[] = {
    E5, E5, G5, E5, C5, D5, B4, A4, A4, B4, D5, G4, B4, E5, E5, G5, E5, C5, D5, B4, A4, A4, B4, C5, A4
  };

  int duration[] = {
    8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4
  };

  for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
    tone(S0, melody[i], duration[i]);
    unsigned long noteStartTime = millis();
    while (millis() - noteStartTime < duration[i]) {
      // Aguarde até que a nota termine
    }
  }
}

void playMusic2() {
  int melody[] = {
    E5, G5, A5, E5, G5, A5, E5, G5, A5, E5, G5, A5, E5, G5, A5, B5
  };

  int duration[] = {
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
  };

  for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
    tone(S1, melody[i], duration[i]);
    unsigned long noteStartTime = millis();
    while (millis() - noteStartTime < duration[i]) {
      // Aguarde até que a nota termine
    }
  }
}

void playMusic3() {
  int melody[] = {E5, D5, C5, B4, C5, D5, E5, E5, G5, G4, C5, E5, D5, C5, B4};
  int duration[] = {8, 4, 4, 4, 4, 4, 8, 8, 4, 4, 4, 8, 4, 4, 4};

  for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
    tone(S2, melody[i], duration[i]);
    unsigned long noteStartTime = millis();
    while (millis() - noteStartTime < duration[i]) {
      // Aguarde até que a nota termine
    }
  }
}

void playMusic4() {
  int melody[] = {E5, B4, C5, D5, C5, B4, A4, A4, C5, E5, D5, C5, B4};
  int duration[] = {8, 4, 4, 4, 4, 4, 8, 8, 4, 4, 4, 8, 4};

  for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
    tone(S0, melody[i], duration[i]);
    unsigned long noteStartTime = millis();
    while (millis() - noteStartTime < duration[i]) {
      // Aguarde até que a nota termine
    }
  }
}

void playMusic5() {
  int melody[] = {E4, D4, E4, G4, E5, C5, E4, D4, E4, G4, E5, C5, E4, G4, E5};
  int duration[] = {8, 4, 4, 4, 8, 4, 4, 4, 8, 4, 4, 4, 8, 4, 4};

  for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
    tone(S1, melody[i], duration[i]);
    unsigned long noteStartTime = millis();
    while (millis() - noteStartTime < duration[i]) {
      // Aguarde até que a nota termine
    }
  }
}

void playMusic6() {
  int melody[] = {E5, G5, E5, G5, E5, G5, E5, G5};
  int duration[] = {4, 4, 4, 4, 4, 4, 4, 4};

  for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
    tone(S2, melody[i], duration[i]);
    unsigned long noteStartTime = millis();
    while (millis() - noteStartTime < duration[i]) {
      // Aguarde até que a nota termine
    }
  }
}

void playMusic7() {
  int melody[] = {E4, G4, E4, C4, E4, D4, G4, E4, A4};
  int duration[] = {800, 4, 40, 4, 1000, 4, 40, 4, 800};

  for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
    tone(S0, melody[i], duration[i]);
    unsigned long noteStartTime = millis();
    while (millis() - noteStartTime < duration[i]) {
      // Aguarde até que a nota termine
    }
  }
}

void playMusic8() {
  int melody[] = {E5, E5, Ash5, E5, G5, F5, E5, C5, D5, B4, C5, E5, D5, C5, B4};
  int duration[] = {8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4};

  for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
    tone(S1, melody[i], duration[i]);
    unsigned long noteStartTime = millis();
    while (millis() - noteStartTime < duration[i]) {
      // Aguarde até que a nota termine
    }
  }
}
